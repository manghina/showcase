import { Injectable } from '@angular/core';
import { filter } from 'rxjs/operators';
import { StorageListenerService } from './storage-listener.service';
import { StorageProxy } from './storage-proxy';
import * as i0 from "@angular/core";
import * as i1 from "./storage-listener.service";
export class SessionStorageService extends StorageProxy {
    constructor(storageListenerService) {
        super(sessionStorage);
        this.storageListenerService = storageListenerService;
    }
    /**
     * Listens for `sessionStorage` StorageEvent events
     *
     * @returns
     * An Observable which listens to `window` storage events, and filters
     * those which relevant to `sessionStorage`
     */
    get sessionStorage$() {
        return this.storageListenerService.storage$.pipe(filter(event => (event === null || event === void 0 ? void 0 : event.storageArea) === sessionStorage));
    }
}
SessionStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(i0.ɵɵinject(i1.StorageListenerService)); }, token: SessionStorageService, providedIn: "root" });
SessionStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SessionStorageService.ctorParameters = () => [
    { type: StorageListenerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RvcmFnZS1hcGkvc3JjL2xpYi9zZXNzaW9uLXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUsvQyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsWUFBWTtJQUNyRCxZQUE2QixzQkFBOEM7UUFDekUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBREssMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtJQUUzRSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzlDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFdBQVcsTUFBSyxjQUFjLENBQUMsQ0FDdkQsQ0FBQztJQUNKLENBQUM7Ozs7WUFuQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFMUSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdG9yYWdlTGlzdGVuZXJTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLWxpc3RlbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVByb3h5IH0gZnJvbSAnLi9zdG9yYWdlLXByb3h5JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFNlc3Npb25TdG9yYWdlU2VydmljZSBleHRlbmRzIFN0b3JhZ2VQcm94eSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZUxpc3RlbmVyU2VydmljZTogU3RvcmFnZUxpc3RlbmVyU2VydmljZSkge1xuICAgIHN1cGVyKHNlc3Npb25TdG9yYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5zIGZvciBgc2Vzc2lvblN0b3JhZ2VgIFN0b3JhZ2VFdmVudCBldmVudHNcbiAgICpcbiAgICogQHJldHVybnNcbiAgICogQW4gT2JzZXJ2YWJsZSB3aGljaCBsaXN0ZW5zIHRvIGB3aW5kb3dgIHN0b3JhZ2UgZXZlbnRzLCBhbmQgZmlsdGVyc1xuICAgKiB0aG9zZSB3aGljaCByZWxldmFudCB0byBgc2Vzc2lvblN0b3JhZ2VgXG4gICAqL1xuICBnZXQgc2Vzc2lvblN0b3JhZ2UkKCk6IE9ic2VydmFibGU8U3RvcmFnZUV2ZW50PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmFnZUxpc3RlbmVyU2VydmljZS5zdG9yYWdlJC5waXBlKFxuICAgICAgZmlsdGVyKGV2ZW50ID0+IGV2ZW50Py5zdG9yYWdlQXJlYSA9PT0gc2Vzc2lvblN0b3JhZ2UpXG4gICAgKTtcbiAgfVxufVxuIl19