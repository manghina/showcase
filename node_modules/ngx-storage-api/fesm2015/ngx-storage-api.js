import { ɵɵdefineInjectable, Injectable, ɵɵinject, NgModule } from '@angular/core';
import { share, filter } from 'rxjs/operators';
import { defer, fromEvent } from 'rxjs';

class StorageListenerService {
    constructor() {
        /**
         * Listen to window storage events.
         *
         * @returns
         * An Observable which listens to window storage events,
         * shared to add a single handler to window object
         */
        this.storage$ = defer(() => fromEvent(window, 'storage').pipe(share()));
    }
}
StorageListenerService.ɵprov = ɵɵdefineInjectable({ factory: function StorageListenerService_Factory() { return new StorageListenerService(); }, token: StorageListenerService, providedIn: "root" });
StorageListenerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];

class StorageProxy {
    constructor(storage) {
        this.storage = storage;
    }
    get length() {
        return this.storage.length;
    }
    clear() {
        this.storage.clear();
    }
    getItem(key) {
        return this.storage.getItem(key);
    }
    key(index) {
        return this.storage.key(index);
    }
    removeItem(key) {
        this.storage.removeItem(key);
    }
    setItem(key, value) {
        this.storage.setItem(key, value);
    }
}

class LocalStorageService extends StorageProxy {
    constructor(storageListenerService) {
        super(localStorage);
        this.storageListenerService = storageListenerService;
    }
    /**
     * Listens for `localStorage` StorageEvent events
     *
     * @returns
     * An Observable which listens to `window` storage events, and filters
     * those which relevant to `localStorage`
     */
    get localStorage$() {
        return this.storageListenerService.storage$.pipe(filter(event => (event === null || event === void 0 ? void 0 : event.storageArea) === localStorage));
    }
}
LocalStorageService.ɵprov = ɵɵdefineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(ɵɵinject(StorageListenerService)); }, token: LocalStorageService, providedIn: "root" });
LocalStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LocalStorageService.ctorParameters = () => [
    { type: StorageListenerService }
];

class SessionStorageService extends StorageProxy {
    constructor(storageListenerService) {
        super(sessionStorage);
        this.storageListenerService = storageListenerService;
    }
    /**
     * Listens for `sessionStorage` StorageEvent events
     *
     * @returns
     * An Observable which listens to `window` storage events, and filters
     * those which relevant to `sessionStorage`
     */
    get sessionStorage$() {
        return this.storageListenerService.storage$.pipe(filter(event => (event === null || event === void 0 ? void 0 : event.storageArea) === sessionStorage));
    }
}
SessionStorageService.ɵprov = ɵɵdefineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(ɵɵinject(StorageListenerService)); }, token: SessionStorageService, providedIn: "root" });
SessionStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SessionStorageService.ctorParameters = () => [
    { type: StorageListenerService }
];

class NgxStorageApiModule {
    static forRoot() {
        return {
            ngModule: NgxStorageApiModule,
            providers: [LocalStorageService, SessionStorageService],
        };
    }
}
NgxStorageApiModule.decorators = [
    { type: NgModule, args: [{},] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { LocalStorageService, NgxStorageApiModule, SessionStorageService, StorageProxy as ɵa, StorageListenerService as ɵb };
//# sourceMappingURL=ngx-storage-api.js.map
