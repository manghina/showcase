{"version":3,"file":"ngx-storage-api.js","sources":["../../../projects/ngx-storage-api/src/lib/storage-listener.service.ts","../../../projects/ngx-storage-api/src/lib/storage-proxy.ts","../../../projects/ngx-storage-api/src/lib/local-storage.service.ts","../../../projects/ngx-storage-api/src/lib/session-storage.service.ts","../../../projects/ngx-storage-api/src/lib/ngx-storage-api.module.ts","../../../projects/ngx-storage-api/src/ngx-storage-api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { defer, fromEvent, Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageListenerService {\n  /**\n   * Listen to window storage events.\n   *\n   * @returns\n   * An Observable which listens to window storage events,\n   * shared to add a single handler to window object\n   */\n  readonly storage$: Observable<StorageEvent> = defer(() =>\n    fromEvent<StorageEvent>(window, 'storage').pipe(share())\n  );\n}\n","export abstract class StorageProxy implements Storage {\n  constructor(private readonly storage: Storage) {}\n\n  get length(): number {\n    return this.storage.length;\n  }\n\n  clear(): void {\n    this.storage.clear();\n  }\n\n  getItem(key: string): string {\n    return this.storage.getItem(key);\n  }\n\n  key(index: number): string {\n    return this.storage.key(index);\n  }\n\n  removeItem(key: string): void {\n    this.storage.removeItem(key);\n  }\n\n  setItem(key: string, value: string): void {\n    this.storage.setItem(key, value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { StorageListenerService } from './storage-listener.service';\nimport { StorageProxy } from './storage-proxy';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService extends StorageProxy {\n  constructor(private readonly storageListenerService: StorageListenerService) {\n    super(localStorage);\n  }\n\n  /**\n   * Listens for `localStorage` StorageEvent events\n   *\n   * @returns\n   * An Observable which listens to `window` storage events, and filters\n   * those which relevant to `localStorage`\n   */\n  get localStorage$(): Observable<StorageEvent> {\n    return this.storageListenerService.storage$.pipe(\n      filter(event => event?.storageArea === localStorage)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { StorageListenerService } from './storage-listener.service';\nimport { StorageProxy } from './storage-proxy';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SessionStorageService extends StorageProxy {\n  constructor(private readonly storageListenerService: StorageListenerService) {\n    super(sessionStorage);\n  }\n\n  /**\n   * Listens for `sessionStorage` StorageEvent events\n   *\n   * @returns\n   * An Observable which listens to `window` storage events, and filters\n   * those which relevant to `sessionStorage`\n   */\n  get sessionStorage$(): Observable<StorageEvent> {\n    return this.storageListenerService.storage$.pipe(\n      filter(event => event?.storageArea === sessionStorage)\n    );\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { LocalStorageService } from './local-storage.service';\nimport { SessionStorageService } from './session-storage.service';\n\n@NgModule({})\nexport class NgxStorageApiModule {\n  static forRoot(): ModuleWithProviders<NgxStorageApiModule> {\n    return {\n      ngModule: NgxStorageApiModule,\n      providers: [LocalStorageService, SessionStorageService],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {StorageListenerService as ɵb} from './lib/storage-listener.service';\nexport {StorageProxy as ɵa} from './lib/storage-proxy';"],"names":[],"mappings":";;;;MAOa,sBAAsB;IAHnC;;;;;;;;QAWW,aAAQ,GAA6B,KAAK,CAAC,MAClD,SAAS,CAAe,MAAM,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CACzD,CAAC;KACH;;;;YAdA,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;MCNqB,YAAY;IAChC,YAA6B,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAEjD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;KAC5B;IAED,KAAK;QACH,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;IAED,OAAO,CAAC,GAAW;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAClC;IAED,GAAG,CAAC,KAAa;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAChC;IAED,UAAU,CAAC,GAAW;QACpB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;KAC9B;IAED,OAAO,CAAC,GAAW,EAAE,KAAa;QAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAClC;;;MChBU,mBAAoB,SAAQ,YAAY;IACnD,YAA6B,sBAA8C;QACzE,KAAK,CAAC,YAAY,CAAC,CAAC;QADO,2BAAsB,GAAtB,sBAAsB,CAAwB;KAE1E;;;;;;;;IASD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAC9C,MAAM,CAAC,KAAK,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,MAAK,YAAY,CAAC,CACrD,CAAC;KACH;;;;YAnBF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YALQ,sBAAsB;;;MCMlB,qBAAsB,SAAQ,YAAY;IACrD,YAA6B,sBAA8C;QACzE,KAAK,CAAC,cAAc,CAAC,CAAC;QADK,2BAAsB,GAAtB,sBAAsB,CAAwB;KAE1E;;;;;;;;IASD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAC9C,MAAM,CAAC,KAAK,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,MAAK,cAAc,CAAC,CACvD,CAAC;KACH;;;;YAnBF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;YALQ,sBAAsB;;;MCElB,mBAAmB;IAC9B,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;SACxD,CAAC;KACH;;;YAPF,QAAQ,SAAC,EAAE;;;ACJZ;;;;;;"}